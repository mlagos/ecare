<#@ template language="C#v3.5"  hostspecific="true"  #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Xml" #>
<#
	LoadDocument();
  #>
<# 
	GenerateSettings();
#>
<#+

	XmlDocument xmlDoc=null;

	private void LoadDocument()
	{
		xmlDoc=new XmlDocument();
	   	//Load document xml 
		string configFile = this.Host.ResolvePath("ApplicationSettings.xml");
		xmlDoc.Load(configFile);
	} 

	private string GenerateSettings()
	{
		string result=String.Empty;
		#>
		///</summary> 
		// This class is generated by ApplicationSettingsGenerator.tt template.
		///</summary>
		<#+
		result=this.GenerationEnvironment.ToString();
		XmlNode nodeConf = xmlDoc.SelectSingleNode("/Configuration"); //Start with Configuration node
		result+= GenerateClass(nodeConf);
		return result;
	}	

	private string GenerateClass(XmlNode node)
	{
			var result=String.Empty;
			if(node==null)
				return String.Empty;
			var childs = node.ChildNodes;
			if(HasChildNodes(node))
			{
				result+= GenerateClassHeader(node);
				foreach (XmlNode item in childs) {
						result+=GenerateClass(item);
				}
				result+=GenerateClassFooter(node);
			}
			else
			{ 
			  result+=GenerateAttributeForNode(node);
			}
			
			result+= this.GenerationEnvironment.ToString();
			return result;
	}
	
	#region Class methods
	private string GenerateClassHeader(XmlNode node)
	{#>
		public static partial class <#= node.Name=="Configuration" ? "ApplicationSettings" : node.Name #>
		{    
		<#+	
		return this.GenerationEnvironment.ToString();
	}
	
	private string GenerateClassFooter(XmlNode node)
	{#>
		} //End Of Class <#= node.Name #>  
		<#+
		return this.GenerationEnvironment.ToString();
	}
	#endregion
	
	#region Attribute methods
	private string GenerateAttributesForNode(XmlNode node)
	{
		var result=String.Empty;
		foreach(XmlNode item in node.ChildNodes)
		{
			result+=GenerateAttributeForNode(item);
		}
		return result;
	}

	private string GenerateAttributeForNode(XmlNode node)
	{	
		return GenerateAttribute(node.Name, node.InnerText);
	}
	
	private string GenerateAttribute(string name, string valueString)
	{
		if(String.IsNullOrEmpty(name) || String.IsNullOrEmpty(valueString))
			return String.Empty;
			
		int intResult=0;
		double dblResult=Convert.ToDouble(0);
		decimal decResult=Convert.ToDecimal(0);
		
		if(name=="#comment")
		{#>
			///<summary>  
			//<#= valueString #>
			///</summary>
			<#+	
		}
		else if(Int32.TryParse(valueString, out intResult))
		{#>
			public static int <#= name #> = <#= valueString #>;
		<#+
		}
		else if(Double.TryParse(valueString, out dblResult))
		{#>
			public static double <#= name #> = <#= valueString #>;
		<#+
		}
		else
		{		
		#>
		public static string <#= name #> = @"<#= valueString #>";  
		<#+
		}
		return this.GenerationEnvironment.ToString();
	}
	#endregion
	
	private bool HasChildNodes(XmlNode node)
	{
		foreach(XmlNode item in node.ChildNodes)
		{
			if(!item.Name.Equals("#text"))
				return true;
		}
		return false;
	}
#>
