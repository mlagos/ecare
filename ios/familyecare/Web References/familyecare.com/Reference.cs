// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 4.0.30319.1
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------

namespace familyecare.familyecare.com {
    
    
    /// <remarks/>
    [System.Web.Services.WebServiceBinding(Name="DeviceServicesSoap", Namespace="http://familyecare.com/")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DeviceServices : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback GetVersionOperationCompleted;
        
        private System.Threading.SendOrPostCallback RegisterDeviceTokenOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetEmergencyNumbersOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetMessagesOperationCompleted;
        
        private System.Threading.SendOrPostCallback ReplyMessageOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateMessageOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetEventsByActiveOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetEventOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddLocationOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddEncryptedLocationOperationCompleted;
        
        private System.Threading.SendOrPostCallback CkeckinOperationCompleted;
        
        public DeviceServices() {
            this.Url = "http://www.familyecare.com/wservices/deviceservices.asmx";
        }
        
        public DeviceServices(string url) {
            this.Url = url;
        }
        
        public event GetVersionCompletedEventHandler GetVersionCompleted;
        
        public event RegisterDeviceTokenCompletedEventHandler RegisterDeviceTokenCompleted;
        
        public event GetEmergencyNumbersCompletedEventHandler GetEmergencyNumbersCompleted;
        
        public event GetMessagesCompletedEventHandler GetMessagesCompleted;
        
        public event ReplyMessageCompletedEventHandler ReplyMessageCompleted;
        
        public event UpdateMessageCompletedEventHandler UpdateMessageCompleted;
        
        public event GetEventsByActiveCompletedEventHandler GetEventsByActiveCompleted;
        
        public event GetEventCompletedEventHandler GetEventCompleted;
        
        public event AddLocationCompletedEventHandler AddLocationCompleted;
        
        public event AddEncryptedLocationCompletedEventHandler AddEncryptedLocationCompleted;
        
        public event CkeckinCompletedEventHandler CkeckinCompleted;
        
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://familyecare.com/GetVersion", RequestNamespace="http://familyecare.com/", ResponseNamespace="http://familyecare.com/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        public string GetVersion() {
            object[] results = this.Invoke("GetVersion", new object[0]);
            return ((string)(results[0]));
        }
        
        public System.IAsyncResult BeginGetVersion(System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetVersion", new object[0], callback, asyncState);
        }
        
        public string EndGetVersion(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        public void GetVersionAsync() {
            this.GetVersionAsync(null);
        }
        
        public void GetVersionAsync(object userState) {
            if ((this.GetVersionOperationCompleted == null)) {
                this.GetVersionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetVersionCompleted);
            }
            this.InvokeAsync("GetVersion", new object[0], this.GetVersionOperationCompleted, userState);
        }
        
        private void OnGetVersionCompleted(object arg) {
            if ((this.GetVersionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetVersionCompleted(this, new GetVersionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://familyecare.com/RegisterDeviceToken", RequestNamespace="http://familyecare.com/", ResponseNamespace="http://familyecare.com/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        public int RegisterDeviceToken(string deviceId, string deviceToken) {
            object[] results = this.Invoke("RegisterDeviceToken", new object[] {
                        deviceId,
                        deviceToken});
            return ((int)(results[0]));
        }
        
        public System.IAsyncResult BeginRegisterDeviceToken(string deviceId, string deviceToken, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("RegisterDeviceToken", new object[] {
                        deviceId,
                        deviceToken}, callback, asyncState);
        }
        
        public int EndRegisterDeviceToken(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((int)(results[0]));
        }
        
        public void RegisterDeviceTokenAsync(string deviceId, string deviceToken) {
            this.RegisterDeviceTokenAsync(deviceId, deviceToken, null);
        }
        
        public void RegisterDeviceTokenAsync(string deviceId, string deviceToken, object userState) {
            if ((this.RegisterDeviceTokenOperationCompleted == null)) {
                this.RegisterDeviceTokenOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRegisterDeviceTokenCompleted);
            }
            this.InvokeAsync("RegisterDeviceToken", new object[] {
                        deviceId,
                        deviceToken}, this.RegisterDeviceTokenOperationCompleted, userState);
        }
        
        private void OnRegisterDeviceTokenCompleted(object arg) {
            if ((this.RegisterDeviceTokenCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RegisterDeviceTokenCompleted(this, new RegisterDeviceTokenCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://familyecare.com/GetEmergencyNumbers", RequestNamespace="http://familyecare.com/", ResponseNamespace="http://familyecare.com/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        public string GetEmergencyNumbers(string identifier) {
            object[] results = this.Invoke("GetEmergencyNumbers", new object[] {
                        identifier});
            return ((string)(results[0]));
        }
        
        public System.IAsyncResult BeginGetEmergencyNumbers(string identifier, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetEmergencyNumbers", new object[] {
                        identifier}, callback, asyncState);
        }
        
        public string EndGetEmergencyNumbers(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        public void GetEmergencyNumbersAsync(string identifier) {
            this.GetEmergencyNumbersAsync(identifier, null);
        }
        
        public void GetEmergencyNumbersAsync(string identifier, object userState) {
            if ((this.GetEmergencyNumbersOperationCompleted == null)) {
                this.GetEmergencyNumbersOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetEmergencyNumbersCompleted);
            }
            this.InvokeAsync("GetEmergencyNumbers", new object[] {
                        identifier}, this.GetEmergencyNumbersOperationCompleted, userState);
        }
        
        private void OnGetEmergencyNumbersCompleted(object arg) {
            if ((this.GetEmergencyNumbersCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetEmergencyNumbersCompleted(this, new GetEmergencyNumbersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://familyecare.com/GetMessages", RequestNamespace="http://familyecare.com/", ResponseNamespace="http://familyecare.com/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        public CustomMessageDto[] GetMessages(string identifier) {
            object[] results = this.Invoke("GetMessages", new object[] {
                        identifier});
            return ((CustomMessageDto[])(results[0]));
        }
        
        public System.IAsyncResult BeginGetMessages(string identifier, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetMessages", new object[] {
                        identifier}, callback, asyncState);
        }
        
        public CustomMessageDto[] EndGetMessages(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((CustomMessageDto[])(results[0]));
        }
        
        public void GetMessagesAsync(string identifier) {
            this.GetMessagesAsync(identifier, null);
        }
        
        public void GetMessagesAsync(string identifier, object userState) {
            if ((this.GetMessagesOperationCompleted == null)) {
                this.GetMessagesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetMessagesCompleted);
            }
            this.InvokeAsync("GetMessages", new object[] {
                        identifier}, this.GetMessagesOperationCompleted, userState);
        }
        
        private void OnGetMessagesCompleted(object arg) {
            if ((this.GetMessagesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetMessagesCompleted(this, new GetMessagesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://familyecare.com/ReplyMessage", RequestNamespace="http://familyecare.com/", ResponseNamespace="http://familyecare.com/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        public ReplyDto ReplyMessage(ReplyDto replyDto) {
            object[] results = this.Invoke("ReplyMessage", new object[] {
                        replyDto});
            return ((ReplyDto)(results[0]));
        }
        
        public System.IAsyncResult BeginReplyMessage(ReplyDto replyDto, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("ReplyMessage", new object[] {
                        replyDto}, callback, asyncState);
        }
        
        public ReplyDto EndReplyMessage(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((ReplyDto)(results[0]));
        }
        
        public void ReplyMessageAsync(ReplyDto replyDto) {
            this.ReplyMessageAsync(replyDto, null);
        }
        
        public void ReplyMessageAsync(ReplyDto replyDto, object userState) {
            if ((this.ReplyMessageOperationCompleted == null)) {
                this.ReplyMessageOperationCompleted = new System.Threading.SendOrPostCallback(this.OnReplyMessageCompleted);
            }
            this.InvokeAsync("ReplyMessage", new object[] {
                        replyDto}, this.ReplyMessageOperationCompleted, userState);
        }
        
        private void OnReplyMessageCompleted(object arg) {
            if ((this.ReplyMessageCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ReplyMessageCompleted(this, new ReplyMessageCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://familyecare.com/UpdateMessage", RequestNamespace="http://familyecare.com/", ResponseNamespace="http://familyecare.com/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        public MessageDto UpdateMessage(MessageDto messageDto) {
            object[] results = this.Invoke("UpdateMessage", new object[] {
                        messageDto});
            return ((MessageDto)(results[0]));
        }
        
        public System.IAsyncResult BeginUpdateMessage(MessageDto messageDto, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("UpdateMessage", new object[] {
                        messageDto}, callback, asyncState);
        }
        
        public MessageDto EndUpdateMessage(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((MessageDto)(results[0]));
        }
        
        public void UpdateMessageAsync(MessageDto messageDto) {
            this.UpdateMessageAsync(messageDto, null);
        }
        
        public void UpdateMessageAsync(MessageDto messageDto, object userState) {
            if ((this.UpdateMessageOperationCompleted == null)) {
                this.UpdateMessageOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateMessageCompleted);
            }
            this.InvokeAsync("UpdateMessage", new object[] {
                        messageDto}, this.UpdateMessageOperationCompleted, userState);
        }
        
        private void OnUpdateMessageCompleted(object arg) {
            if ((this.UpdateMessageCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateMessageCompleted(this, new UpdateMessageCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://familyecare.com/GetEventsByActive", RequestNamespace="http://familyecare.com/", ResponseNamespace="http://familyecare.com/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        public EventDto[] GetEventsByActive(string identifier) {
            object[] results = this.Invoke("GetEventsByActive", new object[] {
                        identifier});
            return ((EventDto[])(results[0]));
        }
        
        public System.IAsyncResult BeginGetEventsByActive(string identifier, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetEventsByActive", new object[] {
                        identifier}, callback, asyncState);
        }
        
        public EventDto[] EndGetEventsByActive(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((EventDto[])(results[0]));
        }
        
        public void GetEventsByActiveAsync(string identifier) {
            this.GetEventsByActiveAsync(identifier, null);
        }
        
        public void GetEventsByActiveAsync(string identifier, object userState) {
            if ((this.GetEventsByActiveOperationCompleted == null)) {
                this.GetEventsByActiveOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetEventsByActiveCompleted);
            }
            this.InvokeAsync("GetEventsByActive", new object[] {
                        identifier}, this.GetEventsByActiveOperationCompleted, userState);
        }
        
        private void OnGetEventsByActiveCompleted(object arg) {
            if ((this.GetEventsByActiveCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetEventsByActiveCompleted(this, new GetEventsByActiveCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://familyecare.com/GetEvent", RequestNamespace="http://familyecare.com/", ResponseNamespace="http://familyecare.com/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        public EventDto GetEvent(int idEvent) {
            object[] results = this.Invoke("GetEvent", new object[] {
                        idEvent});
            return ((EventDto)(results[0]));
        }
        
        public System.IAsyncResult BeginGetEvent(int idEvent, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetEvent", new object[] {
                        idEvent}, callback, asyncState);
        }
        
        public EventDto EndGetEvent(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((EventDto)(results[0]));
        }
        
        public void GetEventAsync(int idEvent) {
            this.GetEventAsync(idEvent, null);
        }
        
        public void GetEventAsync(int idEvent, object userState) {
            if ((this.GetEventOperationCompleted == null)) {
                this.GetEventOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetEventCompleted);
            }
            this.InvokeAsync("GetEvent", new object[] {
                        idEvent}, this.GetEventOperationCompleted, userState);
        }
        
        private void OnGetEventCompleted(object arg) {
            if ((this.GetEventCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetEventCompleted(this, new GetEventCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://familyecare.com/AddLocation", RequestNamespace="http://familyecare.com/", ResponseNamespace="http://familyecare.com/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        public int AddLocation(string identifier, double lat, double lon, System.DateTime date, bool isCellId, int bateryLevel, string CID, double direction, double mileage, double speed, double HDOP, int CRC) {
            object[] results = this.Invoke("AddLocation", new object[] {
                        identifier,
                        lat,
                        lon,
                        date,
                        isCellId,
                        bateryLevel,
                        CID,
                        direction,
                        mileage,
                        speed,
                        HDOP,
                        CRC});
            return ((int)(results[0]));
        }
        
        public System.IAsyncResult BeginAddLocation(string identifier, double lat, double lon, System.DateTime date, bool isCellId, int bateryLevel, string CID, double direction, double mileage, double speed, double HDOP, int CRC, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("AddLocation", new object[] {
                        identifier,
                        lat,
                        lon,
                        date,
                        isCellId,
                        bateryLevel,
                        CID,
                        direction,
                        mileage,
                        speed,
                        HDOP,
                        CRC}, callback, asyncState);
        }
        
        public int EndAddLocation(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((int)(results[0]));
        }
        
        public void AddLocationAsync(string identifier, double lat, double lon, System.DateTime date, bool isCellId, int bateryLevel, string CID, double direction, double mileage, double speed, double HDOP, int CRC) {
            this.AddLocationAsync(identifier, lat, lon, date, isCellId, bateryLevel, CID, direction, mileage, speed, HDOP, CRC, null);
        }
        
        public void AddLocationAsync(string identifier, double lat, double lon, System.DateTime date, bool isCellId, int bateryLevel, string CID, double direction, double mileage, double speed, double HDOP, int CRC, object userState) {
            if ((this.AddLocationOperationCompleted == null)) {
                this.AddLocationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddLocationCompleted);
            }
            this.InvokeAsync("AddLocation", new object[] {
                        identifier,
                        lat,
                        lon,
                        date,
                        isCellId,
                        bateryLevel,
                        CID,
                        direction,
                        mileage,
                        speed,
                        HDOP,
                        CRC}, this.AddLocationOperationCompleted, userState);
        }
        
        private void OnAddLocationCompleted(object arg) {
            if ((this.AddLocationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddLocationCompleted(this, new AddLocationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://familyecare.com/AddEncryptedLocation", RequestNamespace="http://familyecare.com/", ResponseNamespace="http://familyecare.com/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        public int AddEncryptedLocation(string encryptedLocation) {
            object[] results = this.Invoke("AddEncryptedLocation", new object[] {
                        encryptedLocation});
            return ((int)(results[0]));
        }
        
        public System.IAsyncResult BeginAddEncryptedLocation(string encryptedLocation, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("AddEncryptedLocation", new object[] {
                        encryptedLocation}, callback, asyncState);
        }
        
        public int EndAddEncryptedLocation(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((int)(results[0]));
        }
        
        public void AddEncryptedLocationAsync(string encryptedLocation) {
            this.AddEncryptedLocationAsync(encryptedLocation, null);
        }
        
        public void AddEncryptedLocationAsync(string encryptedLocation, object userState) {
            if ((this.AddEncryptedLocationOperationCompleted == null)) {
                this.AddEncryptedLocationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddEncryptedLocationCompleted);
            }
            this.InvokeAsync("AddEncryptedLocation", new object[] {
                        encryptedLocation}, this.AddEncryptedLocationOperationCompleted, userState);
        }
        
        private void OnAddEncryptedLocationCompleted(object arg) {
            if ((this.AddEncryptedLocationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddEncryptedLocationCompleted(this, new AddEncryptedLocationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://familyecare.com/Ckeckin", RequestNamespace="http://familyecare.com/", ResponseNamespace="http://familyecare.com/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        public int Ckeckin(string deviceId, double lat, double lon, System.DateTime date, bool isCellId, int bateryLevel, string CID, double direction, double mileage, double speed, double HDOP, int CRC, int checkinId) {
            object[] results = this.Invoke("Ckeckin", new object[] {
                        deviceId,
                        lat,
                        lon,
                        date,
                        isCellId,
                        bateryLevel,
                        CID,
                        direction,
                        mileage,
                        speed,
                        HDOP,
                        CRC,
                        checkinId});
            return ((int)(results[0]));
        }
        
        public System.IAsyncResult BeginCkeckin(string deviceId, double lat, double lon, System.DateTime date, bool isCellId, int bateryLevel, string CID, double direction, double mileage, double speed, double HDOP, int CRC, int checkinId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("Ckeckin", new object[] {
                        deviceId,
                        lat,
                        lon,
                        date,
                        isCellId,
                        bateryLevel,
                        CID,
                        direction,
                        mileage,
                        speed,
                        HDOP,
                        CRC,
                        checkinId}, callback, asyncState);
        }
        
        public int EndCkeckin(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((int)(results[0]));
        }
        
        public void CkeckinAsync(string deviceId, double lat, double lon, System.DateTime date, bool isCellId, int bateryLevel, string CID, double direction, double mileage, double speed, double HDOP, int CRC, int checkinId) {
            this.CkeckinAsync(deviceId, lat, lon, date, isCellId, bateryLevel, CID, direction, mileage, speed, HDOP, CRC, checkinId, null);
        }
        
        public void CkeckinAsync(string deviceId, double lat, double lon, System.DateTime date, bool isCellId, int bateryLevel, string CID, double direction, double mileage, double speed, double HDOP, int CRC, int checkinId, object userState) {
            if ((this.CkeckinOperationCompleted == null)) {
                this.CkeckinOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCkeckinCompleted);
            }
            this.InvokeAsync("Ckeckin", new object[] {
                        deviceId,
                        lat,
                        lon,
                        date,
                        isCellId,
                        bateryLevel,
                        CID,
                        direction,
                        mileage,
                        speed,
                        HDOP,
                        CRC,
                        checkinId}, this.CkeckinOperationCompleted, userState);
        }
        
        private void OnCkeckinCompleted(object arg) {
            if ((this.CkeckinCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CkeckinCompleted(this, new CkeckinCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://familyecare.com/")]
    public partial class CustomMessageDto {
        
        /// <remarks/>
        public int IdMessage;
        
        /// <remarks/>
        public int IdUser;
        
        /// <remarks/>
        public int IdActive;
        
        /// <remarks/>
        public System.DateTime Date;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true, DataType="dateTime")]
        public System.Nullable<System.DateTime> DateReceived;
        
        /// <remarks/>
        public string Text;
        
        /// <remarks/>
        public string Phone;
        
        /// <remarks/>
        public string SendBy;
        
        /// <remarks/>
        public string AssistedName;
        
        /// <remarks/>
        public ReplyDto[] Replies;
        
        /// <remarks/>
        public string Confirmed;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://familyecare.com/")]
    public partial class ReplyDto {
        
        /// <remarks/>
        public int IdReply;
        
        /// <remarks/>
        public int IdMessage;
        
        /// <remarks/>
        public System.DateTime Date;
        
        /// <remarks/>
        public string Text;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://familyecare.com/")]
    public partial class MessageDto {
        
        /// <remarks/>
        public int IdMessage;
        
        /// <remarks/>
        public int IdUser;
        
        /// <remarks/>
        public int IdActive;
        
        /// <remarks/>
        public System.DateTime DateSent;
        
        /// <remarks/>
        public System.DateTime DateReceipt;
        
        /// <remarks/>
        public string MsgText;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://familyecare.com/")]
    public partial class EventDto {
        
        /// <remarks/>
        public int IdEvent;
        
        /// <remarks/>
        public int IdActive;
        
        /// <remarks/>
        public System.DateTime Date;
        
        /// <remarks/>
        public string Text;
        
        /// <remarks/>
        public System.DateTime SentDate;
    }
    
    public partial class GetVersionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetVersionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    public delegate void GetVersionCompletedEventHandler(object sender, GetVersionCompletedEventArgs args);
    
    public partial class RegisterDeviceTokenCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RegisterDeviceTokenCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    public delegate void RegisterDeviceTokenCompletedEventHandler(object sender, RegisterDeviceTokenCompletedEventArgs args);
    
    public partial class GetEmergencyNumbersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetEmergencyNumbersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    public delegate void GetEmergencyNumbersCompletedEventHandler(object sender, GetEmergencyNumbersCompletedEventArgs args);
    
    public partial class GetMessagesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetMessagesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public CustomMessageDto[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CustomMessageDto[])(this.results[0]));
            }
        }
    }
    
    public delegate void GetMessagesCompletedEventHandler(object sender, GetMessagesCompletedEventArgs args);
    
    public partial class ReplyMessageCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ReplyMessageCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public ReplyDto Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ReplyDto)(this.results[0]));
            }
        }
    }
    
    public delegate void ReplyMessageCompletedEventHandler(object sender, ReplyMessageCompletedEventArgs args);
    
    public partial class UpdateMessageCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdateMessageCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public MessageDto Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((MessageDto)(this.results[0]));
            }
        }
    }
    
    public delegate void UpdateMessageCompletedEventHandler(object sender, UpdateMessageCompletedEventArgs args);
    
    public partial class GetEventsByActiveCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetEventsByActiveCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public EventDto[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((EventDto[])(this.results[0]));
            }
        }
    }
    
    public delegate void GetEventsByActiveCompletedEventHandler(object sender, GetEventsByActiveCompletedEventArgs args);
    
    public partial class GetEventCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetEventCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public EventDto Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((EventDto)(this.results[0]));
            }
        }
    }
    
    public delegate void GetEventCompletedEventHandler(object sender, GetEventCompletedEventArgs args);
    
    public partial class AddLocationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddLocationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    public delegate void AddLocationCompletedEventHandler(object sender, AddLocationCompletedEventArgs args);
    
    public partial class AddEncryptedLocationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddEncryptedLocationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    public delegate void AddEncryptedLocationCompletedEventHandler(object sender, AddEncryptedLocationCompletedEventArgs args);
    
    public partial class CkeckinCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CkeckinCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    public delegate void CkeckinCompletedEventHandler(object sender, CkeckinCompletedEventArgs args);
}
